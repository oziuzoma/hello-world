# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# commands:
#   print_pipeline_id:
#     description: "A command to print the Circle CI Workflow ID"
#     steps:
#       - run:
#           name: "Print the Circle CI Workflow ID"
#           command: |
#             echo $CIRCLE_WORKFLOW_ID

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # print_hello:
  #   # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
  #   # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
  #   docker:
  #     - image: circleci/node:13.8.0
  #   # Add steps to the job
  #   # See: https://circleci.com/docs/2.0/configuration-reference/#steps
  #   steps:
  #     - checkout
  #     - run:
  #         name: "Say hello"
  #         command: |
  #           echo "Hello"

  # print_world:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - run:
  #         name: "Say World"
  #         command: |
  #           echo "World"

  # print_name:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - run:
  #         name: "Echo my name from an env variable"
  #         command: |
  #           echo $USERNAME
  
  # save_hello_world_output:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - run:
  #         name: "save an output to a file"
  #         command: |
  #           echo "hello world" > ~/output.txt 
  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - output.txt 

  # print_output_file:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout 
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: "retrieve an output from a file"
  #         command: |
  #           cat ~/output.txt

  # command_test:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - print_pipeline_id
    
  # failure:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - run:
  #         name: "Fail intentionally"
  #         command: |
  #           exit 1
            
  #     - run:
  #         name: "Do this on fail"
  #         command: |
  #           echo "Pipeline has failed!"
  #         when: on_fail
  
  inventory:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "Add [all] to inventory"
          command: |
            echo "[all]" > ~/inventory.txt
      - run:
          name: "Add Public IP to invtory"
          command: |
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=Udacity" --output text >> ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt

  print_inventory:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - attach_workspace:
          at: ~/
      - run:
          name: "retrieve an output"
          command: |
            cat ~/inventory.txt
  

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  udacity-workflow:
    jobs:
      # - print_hello
      # - print_world:
      #     requires: [print_hello]
      # - print_name:
      #     requires: [print_hello,print_world]
      # - save_hello_world_output
      # - print_output_file:
      #     requires: [save_hello_world_output]
      # - command_test:
      #     requires: [print_output_file]
      # - failure:
      #     requires: [command_test]
      - inventory
      - print_inventory:
          requires: [inventory]
        
           
          
